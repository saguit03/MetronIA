#!/usr/bin/env python3
"""
Pipeline principal de MetronIA: Genera mutaciones y analiza interpretaciones musicales.

Este script implementa el pipeline completo:
1. Crear mutaciones a partir de un MIDI de referencia
2. Convertir todas las mutaciones y el MIDI de referencia a WAV
3. Analizar cada mutaci√≥n compar√°ndola con el original
4. Guardar los resultados de an√°lisis en formato CSV
"""

import os
import argparse
from pathlib import Path
from typing import Dict, Any, List, Optional
import pandas as pd
from tqdm import tqdm

# Imports del proyecto
from mutations.manager import MutationManager
from mutations.midi_utils import load_midi_with_pretty_midi, load_midi_with_mido, save_excerpt_in_audio, save_mutation_complete, extract_tempo_from_midi
from analyzers import analyze_performance
from analyzers import MusicAnalyzer, ResultVisualizer

def save_analysis_results_to_csv(analysis_data: List[Dict[str, Any]], output_file: str):
    """
    Guarda los resultados de an√°lisis en formato CSV.
    
    Args:
        analysis_data: Lista de diccionarios con los datos de an√°lisis
        output_file: Ruta del archivo CSV de salida
    """
    if not analysis_data:
        print("‚ö†Ô∏è No hay datos de an√°lisis para guardar en CSV")
        return
    
    # Crear DataFrame
    df = pd.DataFrame(analysis_data)
    
    # Guardar CSV
    df.to_csv(output_file, index=False, encoding='utf-8')
    print(f"‚úÖ Resultados guardados en CSV: {output_file}")
    
    return df


def create_mutation_pipeline(midi_file_path: str, output_base_dir: str = "results", 
                           categories_filter: Optional[List[str]] = None):
    """
    Pipeline completo para generar mutaciones y analizar interpretaciones.
    
    Args:
        midi_file_path: Ruta al archivo MIDI de referencia
        output_base_dir: Directorio base para guardar resultados
        categories_filter: Lista de categor√≠as espec√≠ficas a aplicar. Si es None, aplica todas.
    """
    print("=" * 60)
    print("üéµ PIPELINE METRONIA - AN√ÅLISIS DE INTERPRETACIONES MUSICALES")
    print("=" * 60)
    
    # Configuraci√≥n
    midi_path = Path(midi_file_path)
    midi_name = midi_path.stem
    results_dir = Path(output_base_dir)
    
    # Crear directorio de resultados
    results_dir.mkdir(exist_ok=True)
    
    print(f"\nüìÅ Directorio de resultados: {results_dir.absolute()}")
      # 1. CARGAR MIDI ORIGINAL
    print(f"\nüéº Cargando MIDI original: {midi_file_path}")
    try:
        original_excerpt = load_midi_with_pretty_midi(midi_file_path)
        print("‚úÖ Archivo MIDI cargado exitosamente con pretty_midi")
    except Exception as e:
        print(f"‚ö†Ô∏è Error con pretty_midi: {e}")
        try:
            original_excerpt = load_midi_with_mido(midi_file_path)
            print("‚úÖ Archivo MIDI cargado exitosamente con mido")
        except Exception as e2:
            print(f"‚ùå Error cargando MIDI: {e2}")
            return None
    
    # Extraer tempo del MIDI original
    print(f"\nüéµ Extrayendo tempo del MIDI original...")
    base_tempo = extract_tempo_from_midi(midi_file_path)
    print(f"‚úÖ Tempo detectado: {base_tempo} BPM")
    
    # 2. GENERAR AUDIO DE REFERENCIA
    print(f"\nüéß Generando audio de referencia...")
    try:
        reference_audio_path = save_excerpt_in_audio(
            excerpt=original_excerpt,
            save_name=f"{midi_name}_reference"
        )
        print(f"‚úÖ Audio de referencia guardado: {reference_audio_path}")
    except Exception as e:
        print(f"‚ùå Error generando audio de referencia: {e}")
        return None
      # 3. CREAR GESTOR DE MUTACIONES
    print(f"\nüß¨ Inicializando gestor de mutaciones...")
    mutation_manager = MutationManager()
    
    # Aplicar filtro de categor√≠as si se especifica
    if categories_filter:
        print(f"üéØ Filtrando categor√≠as: {', '.join(categories_filter)}")
        
        # Verificar que las categor√≠as especificadas existen
        available_categories = list(mutation_manager.categories.keys())
        invalid_categories = [cat for cat in categories_filter if cat not in available_categories]
        
        if invalid_categories:
            print(f"‚ùå Categor√≠as no v√°lidas: {', '.join(invalid_categories)}")
            print(f"üìã Categor√≠as disponibles: {', '.join(available_categories)}")
            return None
        
        # Filtrar las categor√≠as
        filtered_categories = {name: category for name, category in mutation_manager.categories.items() 
                             if name in categories_filter}
        mutation_manager.categories = filtered_categories
    
    total_mutations = len(mutation_manager.get_all_mutations())
    print(f"üìä Total de mutaciones a aplicar: {total_mutations}")
    for category_name, category in mutation_manager.categories.items():
        print(f"  - {category.description}: {len(category.mutations)} mutaciones")
    
    # 4. APLICAR MUTACIONES Y GENERAR AUDIO
    print(f"\nüéØ Aplicando mutaciones y generando archivos de audio...")
    
    successful_mutations = []
    failed_mutations = []
    for category_name, category in mutation_manager.categories.items():
        for mutation_name, mutation in category.mutations.items():
            try:
                # Aplicar mutaci√≥n con el tempo correcto
                success = mutation.apply(original_excerpt, tempo=base_tempo)
                
                if success and mutation.excerpt is not None:
                    # Generar archivo de audio y MIDI con tempo correcto
                    file_name = f"{midi_name}_{mutation_name}"
                    
                    # Usar save_mutation_complete para calcular autom√°ticamente el tempo
                    audio_path, midi_path, calculated_tempo = save_mutation_complete(
                        mutation_result=mutation,
                        save_name=file_name,
                        base_tempo=base_tempo  # Usar el tempo extra√≠do del MIDI original
                    )
                    
                    mutation.set_path(audio_path)
                    successful_mutations.append((category_name, mutation_name, mutation, audio_path))
                else:
                    failed_mutations.append((category_name, mutation_name, mutation.error or "Unknown error"))
                    
            except Exception as e:
                failed_mutations.append((category_name, mutation_name, str(e)))
    
    print(f"\nüìä Resumen de generaci√≥n de mutaciones:")
    print(f"  ‚úÖ Exitosas: {len(successful_mutations)}")
    print(f"  ‚ùå Fallidas: {len(failed_mutations)}")
    
    if failed_mutations:
        print(f"\n‚ö†Ô∏è Mutaciones fallidas:")
        for category, name, error in failed_mutations:
            print(f"  - {category}.{name}: {error}")
      # 5. AN√ÅLISIS DE CADA MUTACI√ìN VS ORIGINAL
    print(f"\nüî¨ Analizando mutaciones contra el original...")
    
    csv_data = []
    
    # Crear analizador y visualizador una sola vez
    analyzer = MusicAnalyzer()
    result_visualizer = ResultVisualizer(output_dir=results_dir / "mutations")
    
    for category_name, mutation_name, mutation, audio_path in tqdm(successful_mutations, 
                                                                   desc="Analizando mutaciones"):
        try:
            analysis_result = analyzer.comprehensive_analysis(
                reference_path=reference_audio_path,
                live_path=audio_path,
                save_name=f"{midi_name}_{mutation_name}",
                reference_tempo=base_tempo  # Pasar el tempo extra√≠do del MIDI
            )
            
            # Obtener datos para CSV usando el m√©todo directo de OnsetDTWAnalysisResult
            dtw_onset_result = analysis_result.get('dtw_onsets')
            if dtw_onset_result:
                csv_row = dtw_onset_result.get_csv_data(category_name, mutation_name)
                
                # Agregar datos adicionales del an√°lisis completo
                csv_row.update({
                    'beat_spectrum_similar': 'Similar' if analysis_result['beat_spectrum'].is_similar else 'Diferencias significativas',
                    'beat_spectrum_max_difference': f"{analysis_result['beat_spectrum'].max_difference:.3f}",
                    'tempo_reference_bpm': f"{analysis_result['tempo'].tempo_ref:.2f}",
                    'tempo_live_bpm': f"{analysis_result['tempo'].tempo_live:.2f}",
                    'tempo_difference_bpm': f"{analysis_result['tempo'].difference:.2f}",
                    'tempo_similar': 'Tempo similar' if analysis_result['tempo'].is_similar else 'Diferencia significativa de tempo',
                    'structure_measures_ref': analysis_result['segments'].get('measures_ref', 0),
                    'structure_measures_live': analysis_result['segments'].get('measures_live', 0),
                    'structure_compatible': 'Estructura compatible' if analysis_result['segments'].get('overall_compatible', False) else 'Estructura incompatible',
                    'dtw_regular': analysis_result.get('dtw_analysis', {}).get('overall_assessment', 'N/A'),
                    'audio_file_path': str(audio_path),
                    'reference_audio_path': str(reference_audio_path)
                })
                
                csv_data.append(csv_row)
                
                # Generar visualizaciones detalladas para algunas mutaciones importantes
                # (para evitar generar demasiados archivos, solo para las primeras de cada categor√≠a)
                if len([row for row in csv_data if row['mutation_category'] == category_name]) <= 2:
                    try:
                        result_visualizer.plot_onset_errors_detailed(
                            dtw_onset_result=dtw_onset_result,
                            save_name=f"{midi_name}_{category_name}_{mutation_name}",
                            show_plot=False
                        )
                    except Exception as viz_error:
                        print(f"‚ö†Ô∏è Error generando visualizaci√≥n para {mutation_name}: {viz_error}")
            else:
                print(f"‚ö†Ô∏è No se obtuvieron resultados DTW para {category_name}.{mutation_name}")
                
        except Exception as e:
            print(f"‚ùå Error analizando {category_name}.{mutation_name}: {e}")
            # Agregar una fila con datos m√≠nimos para no perder la informaci√≥n
            csv_data.append({
                'mutation_category': category_name,
                'mutation_name': mutation_name,                'error': str(e),
                'audio_file_path': str(audio_path),
                'reference_audio_path': str(reference_audio_path)
            })
    
    print(f"\nüìà An√°lisis completado: {len(csv_data)} mutaciones analizadas")
    
    # Guardar resultados en CSV
    if csv_data:
        csv_file = results_dir / f"analysis_results_{midi_name}.csv"
        save_analysis_results_to_csv(csv_data, csv_file)
        
        # Generar un reporte resumen usando ResultVisualizer
        try:
            # Crear un an√°lisis sint√©tico para el reporte general
            successful_analyses = [row for row in csv_data if 'error' not in row]
            if successful_analyses:
                print(f"\nüìä Generando reporte de resumen...")
                
                # Calcular estad√≠sticas generales
                summary_stats = {
                    'total_mutations': len(csv_data),
                    'successful_analyses': len(successful_analyses),
                    'failed_analyses': len(csv_data) - len(successful_analyses),
                    'categories_analyzed': len(set(row.get('mutation_category', 'unknown') for row in csv_data)),
                    'avg_consistency_rate': sum(float(row.get('dtw_onsets_consistency_rate', '0%').replace('%', '')) 
                                              for row in successful_analyses) / len(successful_analyses) if successful_analyses else 0
                }
                
                summary_report_path = results_dir / f"summary_report_{midi_name}.txt"
                with open(summary_report_path, 'w', encoding='utf-8') as f:
                    f.write(f"""
REPORTE RESUMEN DEL PIPELINE METRONIA
{'='*50}
Archivo MIDI analizado: {midi_file_path}
Fecha: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}

ESTAD√çSTICAS GENERALES:
- Total mutaciones procesadas: {summary_stats['total_mutations']}
- An√°lisis exitosos: {summary_stats['successful_analyses']}
- An√°lisis fallidos: {summary_stats['failed_analyses']}
- Categor√≠as analizadas: {summary_stats['categories_analyzed']}
- Tasa de consistencia promedio: {summary_stats['avg_consistency_rate']:.1f}%

ARCHIVOS GENERADOS:
- Audio de referencia: {reference_audio_path}
- Archivos de mutaciones: {len(successful_mutations)} archivos WAV
- Resultados CSV: {csv_file}
- Visualizaciones: {results_dir / 'visualizations'}
- Este reporte: {summary_report_path}

AN√ÅLISIS POR CATEGOR√çA:
""")
                    
                    # Estad√≠sticas por categor√≠a
                    for category in set(row.get('mutation_category', 'unknown') for row in successful_analyses):
                        category_data = [row for row in successful_analyses if row.get('mutation_category') == category]
                        if category_data:
                            avg_consistency = sum(float(row.get('dtw_onsets_consistency_rate', '0%').replace('%', '')) 
                                                for row in category_data) / len(category_data)
                            f.write(f"- {category}: {len(category_data)} mutaciones, consistencia promedio: {avg_consistency:.1f}%\n")
                
                print(f"  üìã Reporte de resumen guardado en: {summary_report_path}")
        
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando reporte de resumen: {e}")
        
        return csv_file
    else:
        print("‚ö†Ô∏è No se generaron datos para CSV")
        return None


def main():
    """Funci√≥n principal del pipeline."""
    
    # Configurar argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(
        description="Pipeline MetronIA: Genera mutaciones y analiza interpretaciones musicales",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:

  # Aplicar todas las mutaciones (comportamiento por defecto)
  python mutar_y_analizar.py

  # Aplicar solo mutaciones de timing
  python mutar_y_analizar.py --categories timing_errors

  # Aplicar m√∫ltiples categor√≠as espec√≠ficas
  python mutar_y_analizar.py --categories timing_errors tempo_errors

  # Usar un archivo MIDI espec√≠fico
  python mutar_y_analizar.py --midi path/to/your/file.mid

  # Combinaci√≥n de opciones
  python mutar_y_analizar.py --midi midi/Acordai-100.mid --categories timing_errors pitch_errors

Categor√≠as disponibles:
  - pitch_errors: Errores de altura de las notas
  - tempo_errors: Errores relacionados con el tempo
  - timing_errors: Errores de timing de las notas
  - duration_errors: Errores de duraci√≥n de las notas
  - note_errors: Errores de presencia de notas
  - articulation_errors: Errores de articulaci√≥n
        """
    )
    
    parser.add_argument(
        '--midi',
        type=str,
        default="midi/Acordai-100.mid",
        help='Ruta al archivo MIDI de referencia (default: midi/Acordai-100.mid)'
    )
    
    parser.add_argument(
        '--categories',
        nargs='*',
        help='Categor√≠as espec√≠ficas de mutaciones a aplicar. Si no se especifica, aplica todas.'
    )
    
    parser.add_argument(
        '--output',
        type=str,
        default="results",
        help='Directorio base para guardar resultados (default: results)'
    )
    
    parser.add_argument(
        '--list-categories',
        action='store_true',
        help='Mostrar todas las categor√≠as disponibles y salir'
    )
    
    args = parser.parse_args()
    
    # Si se pide listar categor√≠as, mostrarlas y salir
    if args.list_categories:
        print("üìã CATEGOR√çAS DE MUTACIONES DISPONIBLES:")
        print("=" * 50)
        manager = MutationManager()
        for category_name, category in manager.categories.items():
            print(f"\nüéØ {category_name}")
            print(f"   Descripci√≥n: {category.description}")
            print(f"   Mutaciones: {len(category.mutations)}")
            for mutation_name in category.mutations.keys():
                print(f"     - {mutation_name}")
        print("\nüí° Usa --categories seguido de los nombres para filtrar.")
        print("üí° Ejemplo: --categories timing_errors tempo_errors")
        return
    
    # Configurar archivo MIDI
    MIDI_FILE_PATH = args.midi
    
    # Verificar que el archivo existe
    if not os.path.exists(MIDI_FILE_PATH):
        print(f"‚ùå Error: El archivo {MIDI_FILE_PATH} no existe.")
        print("Por favor, verifica la ruta del archivo MIDI.")
        return
    
    # Mostrar configuraci√≥n
    print("üéµ CONFIGURACI√ìN DEL PIPELINE:")
    print(f"  üìÑ Archivo MIDI: {MIDI_FILE_PATH}")
    print(f"  üìÅ Directorio salida: {args.output}")
    if args.categories:
        print(f"  üéØ Categor√≠as filtradas: {', '.join(args.categories)}")
    else:
        print(f"  üéØ Categor√≠as: Todas (sin filtro)")
    
    # Ejecutar pipeline
    try:
        csv_file = create_mutation_pipeline(
            midi_file_path=MIDI_FILE_PATH,
            output_base_dir=args.output,
            categories_filter=args.categories
        )
        
        if csv_file:
            print(f"\nüéµ Pipeline completado para: {MIDI_FILE_PATH}")
            print(f"‚úÖ Resultados guardados en: {csv_file}")
        else:
            print(f"\n‚ö†Ô∏è Pipeline completado pero sin resultados CSV")
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Pipeline interrumpido por el usuario")
        
    except Exception as e:
        print(f"\n‚ùå Error en el pipeline: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
